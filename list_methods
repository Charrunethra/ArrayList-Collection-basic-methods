//create array list and add some elements
List<String> list_Strings = new ArrayList<String>();
  list_Strings.add("Red");
  
//ITERATE THROUGH ALL ELEMENTS
for (String element : list_Strings) {
    System.out.println(element);
    }
    
//INSERT AN ELEMENT INTO THE ARRAY LIST AT THE FIRST POSITION
list_Strings.add(0, "Pink");
  list_Strings.add(5, "Yellow");
  
//RETRIEVE AN ELEMENT AT THE SPECIFIC INDEX
String element = list_Strings.get(0);

//UPDATE SPECIFIC ARRAY ELEMENT WITH THE GIVEN ELEMENT
list_Strings.set(2, "Yellow");

//REMOVE THE THIRD ELEMENT OF THE ARRAY
list_Strings.remove(2);

//TO SEARCH AN ELEMENT IN AN ARRAYLIST
if (list_Strings.contains("Red")) {
    System.out.println("Found the element");
    }
    
//SORT A GIVEN ARRAY LIST
Collections.sort(list_Strings);

//COPY ONE ARRAYLIST TO ANOTHER
// Copy List2 to List1
  Collections.copy(List1, List2);      // if both the list has same number of elements it works
  
//TO SHUFFLE ELEMENTS IN AN ARRAYLIST
Collections.shuffle(list_Strings);

//REVERSE THE ARRAYLIST
Collections.reverse(list_Strings);

//EXTRACT THE PORTION OF THE ARRAYLIST
System.out.println("Original list: " + list_Strings);
  List<String> sub_List = list_Strings.subList(0, 3);
  System.out.println("List of first three elements: " + sub_List);

//COMPARE TWO ARRAYLISTS
for (String e : c1)
             c3.add(c2.contains(e) ? "Yes" : "No");
             
//SWAP TWO ELEMENTS
Collections.swap(c1, 0, 2);

//JOIN TWO ARRAYLISTS
a.addAll(c1);
        a.addAll(c2);  // or c1.addAll(c2)--> it will be stored in c1 and print

//To clone arrayList to another arrayList
ArrayList<String> newc1 = (ArrayList<String>)c1.clone();

//EMPTY AN ARRAYLIST
c1.removeAll(c1);

//TO CHECK ARRAYLIST IS EMPTY OR NOT
c1.isEmpty()

//TRIM THE CAPACITY OF THE ARRAYLIST THE CURRENT LIST SIZE
c1.trimToSize();

//INCREASE THE SIZE OF THE ARRAYLIST
//Increase capacity to 6
          c1.ensureCapacity(6);
          
//REPLACING THE ELEMENT
color.set(1,new_color);

//PRINT ELEMENTS OF ARRAYLIST USING POSITIONS OF THE ELEMENT
for (int index = 0; index < no_of_elements; index++)
   System.out.println(c1.get(index));
 }
 
//ARRAYS.ASLIST
EG:
String a[] = new String[] { "A", "B", "C", "D" };
// Getting the list view of Array
List<String> list = Arrays.asList(a);
EG:
 Integer a[] = new Integer[] { 10, 20, 30, 40 };
 // Getting the list view of Array
 List<Integer> list = Arrays.asList(a);
 
 
 //LINK :  https://www.geeksforgeeks.org/arrays-aslist-method-in-java-with-examples/
 // Creating Arrays of Integer type
            Integer a[] = new Integer[] { 10, 20, 30, 40 };
 
            // Getting the list view of Array
            List<Integer> list = Arrays.asList(a);
 
            // Adding another int to the list
            // As Arrays.asList() returns fixed size     IMPORTANT
            // list, we'll get
            // java.lang.UnsupportedOperationException    IMPORTANT
            list.add(50);
 
            // Printing all the elements of list
            System.out.println("The list is: " + list);
            
//LINKEDLIST addFirst maethod in java
Eg:
import java.io.*;
import java.util.LinkedList;
  
public class PrepBytes {
    public static void main(String args[])
    {
        LinkedList<string> list = new LinkedList<string>();
        list.add("Coding");
        list.add("is");
        list.add("Fun");
        System.out.println("The list is: " + list);
        list.addFirst("DSA");
        System.out.println("The new List is: " + list);
    }
}
